Metro = new Object()


const xmlToJson = (xmlString, i_indent) => org.json.XMLKt.Companion.toJSONObject(xmlString, true).toString(i_indent ? i_indent : 4);
const jsonToXml = (jsonString) => org.json.XMLKt.Companion.toString(jsonString);

Metro.test = function test(station){

    /*
            "rowNum": "1",
                "selectedCount": "16",
                "totalCount": "16",
                "subwayId": "1001",
                "updnLine": "상행",
                "trainLineNm": "양주행 - 회기방면",
                "subwayHeading": "오른쪽",
                "statnFid": "1001000123",
                "statnTid": "1001000125",
                "statnId": "1001000124",
                "statnNm": "청량리",
                "ordkey": "01001양주0",
                "subwayList": "1001,1063,1067,1075",
                "statnList": "1001000124,1063075117",
                "barvlDt": "0",
                "btrainNo": "0168",
                "bstatnId": "248",
                "bstatnNm": "양주",
                "recptnDt": "2020-07-24 20:39:18.0",
                "arvlMsg2": "전역 도착",
                "arvlMsg3": "제기동",
                "arvlCd": "5"

     */

    let key = "556b6a434572316a35374c6b47524a"

    let body = JSON.parse(xmlToJson(org.jsoup.Jsoup.connect("http://swopenapi.seoul.go.kr/api/subway/"+key+"/xml/realtimeStationArrival/0/30/"+encodeURI(station)).get()))

    let temp = body.realtimeStationArrival.row

    let number = temp.map(v=>v.rowNum) // 출력 번호
    let totalCount = temp.map(v=>v.totalCount)[0] // 출력 번호
    let line_number = temp.map(v=>v.subwayId) // 지하철 노선명
    let updn = temp.map(v=>v.updnLine) // 상하행 구분
    let arrival_msg2 = temp.map(v=>v.arvlMsg2) // 도착정보 : ex> 2역전 혹은 얼마 후 도착인지
    let arrival_msg3 = temp.map(v=>v.arvlMsg3) // 현재위치
    let train_num = temp.map(v=>v.btrainNo) // 열차번호
    let last_station = temp.map(v=>v.bstatnNm) // 종착역

    let stationFid = temp.map(v=>v.statnFid) // 현재위치
    let stationTid = temp.map(v=>v.statnTid) // 열차번호
    let stationId = temp.map(v=>v.statnId) // 종착역

    let array = []

    for (let i=0 ; i<totalCount ; i++){
        array[i] = [number[i],line_number[i],updn[i],train_num[i],arrival_msg2[i],arrival_msg3[i],last_station[i],stationFid[i],stationTid[i],stationId[i]].join("||")
    }

    return array.join("\n\n")

}


Metro.parse(station){

    let station_name = station

    let key = "556b6a434572316a35374c6b47524a"

    let body = JSON.parse(xmlToJson(org.jsoup.Jsoup.connect("http://swopenapi.seoul.go.kr/api/subway/"+key+"/xml/realtimeStationArrival/0/30/"+encodeURI(station)).get()))

    let temp = body.realtimeStationArrival.row

    let number = temp.map(v=>v.rowNum) // 출력 번호
    let totalCount = temp.map(v=>v.totalCount)[0] // 출력 번호
    let line_number = temp.map(v=>v.subwayId) // 지하철 노선명
    let updn = temp.map(v=>v.updnLine) // 상하행 구분
    let arrival_msg2 = temp.map(v=>v.arvlMsg2) // 도착정보 : ex> 2역전 혹은 얼마 후 도착인지
    let arrival_msg3 = temp.map(v=>v.arvlMsg3) // 현재위치
    let train_num = temp.map(v=>v.btrainNo) // 열차번호
    let last_station = temp.map(v=>v.bstatnNm) // 종착역

    let stationFid = temp.map(v=>v.statnFid) // 현재위치
    let stationTid = temp.map(v=>v.statnTid) // 열차번호
    let stationId = temp.map(v=>v.statnId) // 종착역

    let pre_array = []
    let array = []

    for (let i=0 ; i<totalCount ; i++){
        pre_array[i] = [number[i],line_number[i],updn[i],train_num[i],arrival_msg2[i],arrival_msg3[i],last_station[i],stationFid[i],stationTid[i],stationId[i]]
    }

    array.push( pre_array.filter(v=>String(v[5])==String(station_name+" 도착")).sort(function(a, b) { // 오름차순
        return Number(a[1]) < Number(b[1]) ? -1 : Number(a[1]) > Number(b[1]) ? 1 : 0;
        // 광희, 명수, 재석, 형돈
    }) )

    array.push( pre_array.filter(v=>String(v[5])==String(station_name+" 접근")).sort(function(a, b) { // 오름차순
        return Number(a[1]) < Number(b[1]) ? -1 : Number(a[1]) > Number(b[1]) ? 1 : 0;
        // 광희, 명수, 재석, 형돈
    }) )

    return array.join("||").return("\n\n")

}



module.exports = Metro