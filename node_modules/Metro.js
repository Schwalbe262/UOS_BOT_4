Metro = new Object()

const xmlToJson = (xmlString, i_indent) => org.json.XMLKt.Companion.toJSONObject(xmlString, true).toString(i_indent ? i_indent : 4);
const jsonToXml = (jsonString) => org.json.XMLKt.Companion.toString(jsonString);

var cacheModule={} // require 관련 변수

function require(src,force){
    if(!force && cacheModule[src]!=undefined){
        return cacheModule[src];
    }
    else{
        var module = {exports:{}}
        var exports=module.exports
        eval(readFile("node_modules/"+src))
        cacheModule[src] = module.exports;
        return module.exports
    }
}

D = require("DBManager.js")
var myDB = android.database.sqlite.SQLiteDatabase.openDatabase("/sdcard/katalkbot/Bots/main/DB", null, android.database.sqlite.SQLiteDatabase.CREATE_IF_NECESSARY);





Metro.test = function test(station){

    /*
            "rowNum": "1",
                "selectedCount": "16",
                "totalCount": "16",
                "subwayId": "1001",
                "updnLine": "상행",
                "trainLineNm": "양주행 - 회기방면",
                "subwayHeading": "오른쪽",
                "statnFid": "1001000123",
                "statnTid": "1001000125",
                "statnId": "1001000124",
                "statnNm": "청량리",
                "ordkey": "01001양주0",
                "subwayList": "1001,1063,1067,1075",
                "statnList": "1001000124,1063075117",
                "barvlDt": "0",
                "btrainNo": "0168",
                "bstatnId": "248",
                "bstatnNm": "양주",
                "recptnDt": "2020-07-24 20:39:18.0",
                "arvlMsg2": "전역 도착",
                "arvlMsg3": "제기동",
                "arvlCd": "5"

     */

    let key = "556b6a434572316a35374c6b47524a"

    let body = JSON.parse(xmlToJson(org.jsoup.Jsoup.connect("http://swopenapi.seoul.go.kr/api/subway/"+key+"/xml/realtimeStationArrival/0/30/"+encodeURI(station)).get()))

    let temp = body.realtimeStationArrival.row

    let number = temp.map(v=>v.rowNum) // 출력 번호
    let totalCount = temp.map(v=>v.totalCount)[0] // 출력 번호
    let line_number = temp.map(v=>v.subwayId) // 지하철 노선명
    let updn = temp.map(v=>v.updnLine) // 상하행 구분
    let arrival_msg2 = temp.map(v=>v.arvlMsg2) // 도착정보 : ex> 2역전 혹은 얼마 후 도착인지
    let arrival_msg3 = temp.map(v=>v.arvlMsg3) // 현재위치
    let train_num = temp.map(v=>v.btrainNo) // 열차번호
    let last_station = temp.map(v=>v.bstatnNm) // 종착역

    let stationFid = temp.map(v=>v.statnFid) // 현재위치
    let stationTid = temp.map(v=>v.statnTid) // 열차번호
    let stationId = temp.map(v=>v.statnId) // 종착역

    let array = []

    for (let i=0 ; i<totalCount ; i++){
        array[i] = [number[i],line_number[i],updn[i],train_num[i],arrival_msg2[i],arrival_msg3[i],last_station[i],stationFid[i],stationTid[i],stationId[i]].join("||")
    }

    return array.join("\n\n")

}


Metro.parse = function parse(station){

    let station_name = station.reduceMetro()

    let key = "556b6a434572316a35374c6b47524a"

    let body = JSON.parse(xmlToJson(org.jsoup.Jsoup.connect("http://swopenapi.seoul.go.kr/api/subway/"+key+"/xml/realtimeStationArrival/0/30/"+encodeURI(station_name)).get()))

    let temp = body.realtimeStationArrival.row

    let number = temp.map(v=>v.rowNum) // 출력 번호
    let totalCount = temp.map(v=>v.totalCount)[0] // 출력 번호
    let line_number = temp.map(v=>v.subwayId) // 지하철 노선명
    let updn = temp.map(v=>v.updnLine) // 상하행 구분
    let arrival_msg2 = temp.map(v=>v.arvlMsg2) // 도착정보 : ex> 2역전 혹은 얼마 후 도착인지
    let arrival_msg3 = temp.map(v=>v.arvlMsg3) // 현재위치
    let train_num = temp.map(v=>v.btrainNo) // 열차번호
    let last_station = temp.map(v=>v.bstatnNm) // 종착역

    let stationFid = temp.map(v=>v.statnFid) // 현재위치
    let stationTid = temp.map(v=>v.statnTid) // 열차번호
    let stationId = temp.map(v=>v.statnId) // 종착역

    let pre_array = []
    let array = []

    for (let i=0 ; i<totalCount ; i++){
        pre_array[i] = [[number[i]],[line_number[i]],[updn[i]],[train_num[i]],[arrival_msg2[i]],[arrival_msg3[i]]
            ,[last_station[i]],[stationFid[i]],[stationTid[i]],[stationId[i]],[arrival_msg2[i]]]
    }

    let unique_array = pre_array
    /*
    let unique_array = [pre_array[1]]
    for(let i=1 ; i<pre_array.length ; i++){
        if(unique_array.map(v=>v[3]).indexOf(pre_array[i][3]) < 0) unique_array.push(pre_array[i])
    }

     */

    //pre_array = pre_array.filter(v=>v[6]!=-1)

    array = array.concat( unique_array.filter(v=>String(v[4])==String(station_name+" 도착")) )

    array = array.concat( unique_array.filter(v=>String(v[4])==String(station_name+" 진입")) )

    array = array.concat( unique_array.filter(v=>String(v[4])==String("전역 출발")) )

    array = array.concat( unique_array.filter(v=>String(v[4])==String("전역 도착")) )

    array = array.concat( unique_array.filter(v=>String(v[4])==String("전역 진입")) )

    for (let i=0 ; i<totalCount ; i++){
        try{
            let temp = Number( String(unique_array[i][4]).split("]번째")[0].split("[")[1] ) * 150
            if(isNaN(temp)==false){ unique_array[i][4] = temp }
        }catch(e){}

    }

    for (let i=0 ; i<totalCount ; i++){
        try{
            let temp = Number( String(unique_array[i][4]).split("분")[0] ) * 60
                + Number( String(unique_array[i][4]).split("초")[0].split("분 ")[1] )
            if(isNaN(temp)==false){ unique_array[i][4] = temp }
        }catch(e){}
    }

    unique_array = unique_array.filter(v=>isNaN(v[4])==false)

    array = array.concat( unique_array.sort(function(a,b){return Number(a[4])<Number(b[4]) ? -1 : Number(a[4]) > Number(b[4]) ? 1 : 0}) )

    return array

}

Metro.output = function output(room,station){

    let data = Metro.parse(station)

    if(data.length>5){ data.splice(5,data.length-5) }

    let header_title = station+" 검색 결과"
    let title = []
    let sub_title = []
    for(let i=0 ; i<5 ; i++){
        try{
            title[i] = "현재 위치 : " + data[i][4] + " (" + data[i][6] + "행)"  // 현재 위치 : 선릉 (서울대입구행)
            sub_title[i] = String(data[i][1]).lineNumber() + " " + data[i][2] + " (" + data[i][10] + ")" // 1호선 하행 (5분 4초후)
        }
        catch(e){
            title[i] = ""
            sub_title[i] = ""
        }
    }

    let path = ["","","","",""]
    let THU = ["","","","",""]

    Metro.sendKaling_5list(room, header_title, title, sub_title, path, THU)


}



String.prototype.reduceMetro = function(){ // 존나 긴 역명 줄여버리기
    if(this=="올림픽공원(한국체대)"){return "올림픽공원"}
    if(this=="월드컵경기장(성산)"){return "월드컵경기장"}
    if(this=="대흥(서강대앞)"){return "대흥"}
    if(this=="공릉(서울산업대입구)"){return "공릉"}
    if(this=="숭실대입구(살피재)"){return "숭실대입구"}
    if(this=="군자(능동)"){return "군자"}
    if(this=="천호(풍납토성)"){return "천호"}
    if(this=="굽은다리(강동구민회관앞)"){return "굽은다리"}
    if(this=="남한산성입구(성남법원, 검찰청)"){return "남한산성입구"}
    if(this=="오목교(목동운동장앞)"){return "오목교"}
    if(this=="몽촌토성(평화의문)"){return "몽촌토성"}
    if(this=="증산(명지대앞)"){return "증산"}
    if(this=="월곡(동덕여대)"){return "월곡"}
    if(this=="어린이대공원(세종대)"){return "어린이대공원"}
    if(this=="상도(중앙대앞)"){return "상도"}
    if(this=="신정(은행정)"){return "신정"}
    if(this=="광나루(장신대)"){return "광나루"}
    if(this=="새절(신사)"){return "새절"}
    if(this=="상월곡(한국과학기술연구원)"){return "상월곡"}
    if(this=="화랑대(서울여대입구)"){return "화랑대"}
    if(this=="응암순환(상선)"){return "응암순환"}
    if(this=="총신대입구(이수)"){return "이수"}
    if(this=="쌍용(나사렛대)"){return "쌍용"}
    if(this=="아차산(어린이대공원후문)"){return "아차산"}
    if(this=="안암(고대병원앞)"){return "안암"}
    else{return this}
}


String.prototype.lineNumber = function(){ // 존나 긴 역명 줄여버리기

    /*
    if(station=="이수"||station=="총신대입구"){station = "총신대입구(이수)"}
    if(station=="올림픽공원"||station=="한국체대"){station = "올림픽공원(한국체대)"}
    if(station=="월드컵경기장"||station=="성산"){station = "월드컵경기장(성산)"}
    if(station=="대흥"||station=="서강대앞"){station = "대흥(서강대앞)"}
    if(station=="공릉"||station=="서울산업대입구"||station=="서울과기대입구"){station = "공릉(서울산업대입구)"}
    if(station=="숭실대입구"||station=="살피재"){station = "숭실대입구(살피재)"}
    if(station=="군자"||station=="능동"){station = "군자(능동)"}
    if(station=="천호"||station=="풍납토성"){station = "천호(풍납토성)"}
    if(station=="굽은다리"||station=="강동구민회관앞"){station = "굽은다리(강동구민회관앞)"}
    if(station=="남한산성입구"||station=="성남법원"){station = "남한산성입구(성남법원, 검찰청)"}
    if(station=="오목교"||station=="목동운동장앞"){station = "오목교(목동운동장앞)"}
    if(station=="몽촌토성"||station=="평화의문"){station = "몽촌토성(평화의문)"}
    if(station=="신촌(경의중앙선)"||station=="신촌경의중앙선"){station = "신촌(경의.중앙선)"}
    if(station=="증산"||station=="명지대앞"){station = "증산(명지대앞)"}
    if(station=="월곡"||station=="동덕여대"){station = "월곡(동덕여대)"}
    if(station=="어린이대공원"||station=="세종대"){station = "어린이대공원(세종대)"}
    if(station=="상도"||station=="중앙대앞"){station = "상도(중앙대앞)"}
    if(station=="신정"||station=="은행정"){station = "신정(은행정)"}
    if(station=="광나루"||station=="장신대"){station = "광나루(장신대)"}
    if(station=="새절"){station = "새절(신사)"}
    if(station=="상월곡"||station=="한국과학기술연구원"){station = "상월곡(한국과학기술연구원)"}
    if(station=="화랑대"||station=="서울여대입구"){station = "화랑대(서울여대입구)"}
    if(station=="응암순환"||station=="상선"){station = "응암순환(상선)"}
    if(station=="쌍용"||station=="나사렛대"){station = "쌍용(나사렛대)"}
    if(station=="아차산"||station=="어린이대공원후문"){station = "아차산(어린이대공원후문)"}
    if(station=="안암"||station=="고대병원앞"){station = "안암(고대병원앞)"}
     */

    if(this=="1001"){return "1호선"}
    else if(this=="1002"){return "2호선"}
    else if(this=="1003"){return "3호선"}
    else if(this=="1004"){return "4호선"}
    else if(this=="1005"){return "5호선"}
    else if(this=="1006"){return "6호선"}
    else if(this=="1007"){return "7호선"}
    else if(this=="1008"){return "8호선"}
    else if(this=="1009"){return "9호선"}
    else if(this=="1063"){return "경의중앙선"}
    else if(this=="1075"){return "분당선"}
    else if(this=="1077"){return "신분당선"}
    else if(this=="1065"){return "공항철도"}
    else if(this=="1067"){return "경춘선"}

    else{return this}
}


//====================================== 카링 ======================================



const kalingModule=require("kaling.js").Kakao();

Metro.kakaoReset = function kakaoReset(){
    Kakao = new kalingModule();
    //Kakao.init("29fbf6ec828f27d72544c39a3bb4f8d0"); // P.kakaoint자리(이전)
    Kakao.init("904c559bc0ec53c94df6dad990b24c52"); //
    //Kakao.init("e02397085dc52168fe675d7013e1cfbf"); // P.kakaoint자리

    Kakao.login(Metro.getDB("kakaoId"), Metro.getDB("kakaoPw"));
}

Metro.sendKaling_5list = function sendKaling_5list(room, header_title, title, sub_title, path, THU){


    let kalingObj = {
        "link_ver":"4.0",
        "template_id" : (33106),
        "template_args" : {
            header_title : String(header_title),
            title1 : String(title[0]),
            title2 : String(title[1]),
            title3 : String(title[2]),
            title4 : String(title[3]),
            title5 : String(title[4]),
            path1 : String(path[0]),
            path2 : String(path[1]),
            path3 : String(path[2]),
            path4 : String(path[3]),
            path5 : String(path[4]),
            sub_title1 : String(sub_title[0]),
            sub_title2 : String(sub_title[1]),
            sub_title3 : String(sub_title[2]),
            sub_title4 : String(sub_title[3]),
            sub_title5 : String(sub_title[4]),
            THU1 : String(THU[0]),
            THU2 : String(THU[1]),
            THU3 : String(THU[2]),
            THU4 : String(THU[3]),
            THU5 : String(THU[4])
        }
    }
    try{
        Kakao.send(room, kalingObj, "custom");
    }catch(e){
        UOSP.kakaoReset();
        Kakao.send(room, kalingObj, "custom");
    }
}

Metro.sendKaling_4list = function sendKaling_4list(room, header_title, title, sub_title, path, THU){


    let kalingObj = {
        "link_ver":"4.0",
        "template_id" : (33109),
        "template_args" : {
            header_title : String(header_title),
            title1 : String(title[0]),
            title2 : String(title[1]),
            title3 : String(title[2]),
            title4 : String(title[3]),
            path1 : String(path[0]),
            path2 : String(path[1]),
            path3 : String(path[2]),
            path4 : String(path[3]),
            sub_title1 : String(sub_title[0]),
            sub_title2 : String(sub_title[1]),
            sub_title3 : String(sub_title[2]),
            sub_title4 : String(sub_title[3]),
            THU1 : String(THU[0]),
            THU2 : String(THU[1]),
            THU3 : String(THU[2]),
            THU4 : String(THU[3])
        }
    }
    try{
        Kakao.send(room, kalingObj, "custom");
    }catch(e){
        UOSP.kakaoReset();
        Kakao.send(room, kalingObj, "custom");
    }
}

Metro.sendKaling_3list = function sendKaling_3list(room, header_title, title, sub_title, path, THU){


    let kalingObj = {
        "link_ver":"4.0",
        "template_id" : (33111),
        "template_args" : {
            header_title : String(header_title),
            title1 : String(title[0]),
            title2 : String(title[1]),
            title3 : String(title[2]),
            path1 : String(path[0]),
            path2 : String(path[1]),
            path3 : String(path[2]),
            sub_title1 : String(sub_title[0]),
            sub_title2 : String(sub_title[1]),
            sub_title3 : String(sub_title[2]),
            THU1 : String(THU[0]),
            THU2 : String(THU[1]),
            THU3 : String(THU[2])
        }
    }
    try{
        Kakao.send(room, kalingObj, "custom");
    }catch(e){
        UOSP.kakaoReset();
        Kakao.send(room, kalingObj, "custom");
    }
}

Metro.sendKaling_2list = function sendKaling_2list(room, header_title, title, sub_title, path, THU){


    let kalingObj = {
        "link_ver":"4.0",
        "template_id" : (33112),
        "template_args" : {
            header_title : String(header_title),
            title1 : String(title[0]),
            title2 : String(title[1]),
            path1 : String(path[0]),
            path2 : String(path[1]),
            sub_title1 : String(sub_title[0]),
            sub_title2 : String(sub_title[1]),
            THU1 : String(THU[0]),
            THU2 : String(THU[1])
        }
    }
    try{
        Kakao.send(room, kalingObj, "custom");
    }catch(e){
        UOSP.kakaoReset();
        Kakao.send(room, kalingObj, "custom");
    }
}

Metro.sendKaling_1list = function sendKaling_1list(room, header_title, title, sub_title, path, THU){

    let kalingObj = {
        "link_ver":"4.0",
        "template_id" : (33113),
        "template_args" : {
            header_title : String(header_title),
            title1 : String(title[0]),
            path1 : String(path[0]),
            sub_title1 : String(sub_title[0]),
            THU1 : String(THU[0])
        }
    }
    try{
        Kakao.send(room, kalingObj, "custom");
    }catch(e){
        UOSP.kakaoReset();
        Kakao.send(room, kalingObj, "custom");
    }
}

//========================================= 카링 끝 =========================================

// 테이블 생성 : myDB.execSQL("create table UOSPTable (k text PRIMARY KEY, v text);");

Metro.setDB = function setDB(key,value){
    if(D.selectForArray("UOSPTable", null, "k like ?", key).length == 0){ // 해당하는 key에 value가 없는 경우
        D.insert("UOSPTable",{k:key, v:value})
    }
    else{ // 해당하는 key에 value가 있는 경우
        D.update("UOSPTable", {v:value}, "k=?", [key])
    }
}


Metro.getDB = function getDB(key){
    var arr = D.selectForArray("UOSPTable", null, "k=?", [key]);
    if (arr.length > 0) {
        return arr[0][1];
    } else {
        return undefined;
    }
}


Metro.getNum = function getNum(key) {
    var value = UOSP.getDB(key);
    return isNaN(value) ? 0 : Number(UOSP.getDB(key));
}


module.exports = Metro