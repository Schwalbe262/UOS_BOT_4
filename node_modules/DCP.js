DCP = new Object()

var cacheModule={} // require 관련 변수

function require(src,force){
    if(!force && cacheModule[src]!=undefined){
        return cacheModule[src];
    }
    else{
        var module = {exports:{}}
        var exports=module.exports
        eval(readFile("node_modules/"+src))
        cacheModule[src] = module.exports;
        return module.exports
    }
}

D = require("DBManager.js")
var myDB = android.database.sqlite.SQLiteDatabase.openDatabase("/sdcard/katalkbot/Bots/main/DB", null, android.database.sqlite.SQLiteDatabase.CREATE_IF_NECESSARY);
var break_var = 0; // 파싱 강제정지 변수



DCP.UOSP = function UOSP(){ // 시갤 파싱
    let str = ""
    let SW_new = 0; // 새로운 공지가 파싱되었을 경우 1이됨

    let parse = org.jsoup.Jsoup.connect("https://gall.dcinside.com/board/lists/?id=uos").get()
    let adress = parse.select(".gall_list>tbody>.ub-content.us-post>.gall_num").get(0).ownText() // 최상단글 주소
    let title = parse.select(".gall_list>tbody>.ub-content.us-post>.gall_tit>a").get(0).ownText() // 최상단글 제목
    let nickname = parse.select(".gall_list>tbody>.ub-content.us-post>.gall_writer>.nickname>em").get(0).ownText()
    let IP
    try{ IP =  parse.select(".gall_list>tbody>.ub-content.us-post>.gall_writer").get(0).select(".ip").get(0).ownText() }
    catch(e){ IP = ""}


    if (title == "" || title == "MIWIFI" || title == undefined) { // 오류일시 종료
        return 0;
    }

    // DB구조 : [[공지제목,공지주소,날짜],[공지제목,공지주소,날짜]]
    let temp = JSON.parse(DCP.getDB("UOS_DB"+Number(DCP.getDB("UOSDB_index"))))
    let pre_DB = temp[temp.length-1] // 이전 DB 마지막 부분
    if ( pre_DB[1] < adress) { // 새로운 내용이 파싱되었을 경우
        DCP.UOS_collect(Number(pre_DB[1])+1,Number(adress)) // DB 기록작업
        SW_new = 1
    }

    if (SW_new == 1) {

        DCP.sendKaling_notice("시갤톡방",
            "시갤 신규글 알림",
            String("redirect_UOS?tourl=https://gall.dcinside.com/board/view/?id=uos&no="+adress),
            nickname +" "+IP,
            "",
            title)
    }
}
// https://gall.dcinside.com/board/view/?id=uos&no=1
// DB구조 예시: [[제목,주소,날짜,작성자],[제목,주소,날짜,작성자]]
// 마지막 DB : JSON.parse(DCP.getDB("DCP_DB"))[JSON.parse(DCP.getDB("DCP_DB")).length-1]
// 검색코드 예시 : JSON.parse(UOSP.getDB("UOSP1_DB")).filter(v=>String(v[0]).replace(/ /g,"").includes("전자"))
// 검색코드 예시 : JSON.parse(DCP.getDB("DCP_DB")).filter(v=>String(v[0]).replace(/ /g,"").includes("시립")).sort(function(a,b){return Number(a[1])>Number(b[1]) ? -1 : Number(a[1]) < Number(b[1]) ? 1 : 0}).map(v=>"제목 : "+v[0]+" \n작성자 : "+v[3]+" ("+v[2]+")\n- "+"https://gall.dcinside.com/board/view/?id=uos&no="+v[1]+"\n\n").join("").trim()
DCP.UOS_collect = function UOS_collect(start_num,stop_num){

    let count_sucess = 0
    let count_sucess2 = 0
    let count_sucess3 = 0
    let count_failed = 0
    let count_failed2 = 0
    let count_failed3 = 0

    let DB_adress // 저장할 DB 번호 (글 20000개마다 나누어 저장함)

    break_var = 0

    DCP.timer.start()

    Api.replyRoom(console_room_name,"시립대갤러리 파싱 시작")

    var pre_DB = JSON.parse(DCP.getDB("UOS_DB"+Number(DCP.getDB("UOSDB_index")))) // DB 읽기 작업
    for(let i=start_num;i<stop_num+1;i++){


        try{
            if(break_var != 0){
                i = stop_num+1
                Api.replyRoom(console_room_name,"비상정지")
                break
            }

            // 다음 DB로 넘어감 (마지막으로 쓰고있는 DB의 번호를 인덱싱해줌)
            if(i%20000 == 1){
                DCP.setDB("UOSDB_index", Number(DCP.getDB("UOSDB_index"))+1 )
                DCP.setDB("UOS_DB"+Number(DCP.getDB("UOSDB_index")),JSON.stringify([]))
                pre_DB = JSON.parse(DCP.getDB("UOS_DB"+Number(DCP.getDB("UOSDB_index"))))
            }

            if(i%20000 == 0){DB_adress = Math.floor(i/20000) - 1} // 해당 데이터가 저장될 DB 번호호
            else{DB_adress = Math.floor(i/20000)}

           java.lang.Thread.sleep(500*Math.random()+200) // 200ms
            //java.lang.Thread.sleep(3000*Math.random()+1000) // 200ms

            let body = org.jsoup.Jsoup.connect("https://gall.dcinside.com/board/view/?id=uos&no="+i).get()
            let title = body.select(".gallview_head>.title>.title_subject").get(0).ownText() // 글 제목

            try{ var writer = body.select(".gallview_head>.gall_writer>.fl>.nickname>em").get(0).ownText() }
            catch(e){ var writer = body.select(".gallview_head>.gall_writer>.fl>b>b").get(0).ownText() } // 작성자

            let date = body.select(".gallview_head>.gall_writer>.fl>.gall_date").get(0).ownText() // 글 게시일


            try{ var ip = body.select(".gallview_head>.gall_writer>.fl>.ip").get(0).ownText() }
            catch(e){ var ip = "" }

            let array = [[title.replaceAmp()],[i],[date],[writer],[ip]]
            // 초기 DB 세팅 코드 : DCP.setDB("UOS_DB",JSON.stringify([]))

            pre_DB.push(array)
            count_sucess++
            count_sucess2++
            count_sucess3++



        }
        catch(e){ // 해당 주소에 아무런 내용이 존재하지 않을 경우 아무것도 하지 않음
            count_failed++
            count_failed2++
            count_failed3++
        }


        if(i%50==0){
            if(count_failed3==50){
                Api.replyRoom(console_room_name,"파싱 오류\n성공 : "+count_sucess3+"\n실패 : "+count_failed3)
                Api.replyRoom(console_room_name,"비상 정지")
                break_var = 1
            }
            /*
            Api.replyRoom(console_room_name,i+"번 주소까지 진행 완료\n"+
                "성공 : "+count_sucess+"("+count_sucess3+")"+
                "\n실패 : "+count_failed+"("+count_failed3+")"+
                "\n경과시간: " + java.lang.String.format("%.2f",DCP.timer.end()/1000) + "초")
                */
            DCP.setDB("UOS_DB"+DB_adress,JSON.stringify(pre_DB)) // DB 쓰기 작업
            pre_DB = JSON.parse(DCP.getDB("UOS_DB"+DB_adress)) // DB 읽기 작업
            java.lang.Thread.sleep(3000) // 200ms
            count_sucess3 = 0
            count_failed3 = 0
        }

        if(i%1000==0){
            if(count_sucess2/(count_sucess2+count_failed2)>0.3){
                DCP.setDB("UOS_DB_temp"+DB_adress,JSON.stringify(pre_DB))
                Api.replyRoom(console_room_name,"임시 DB 저장 완료\n성공 : "+count_sucess2+"\n실패 : "+count_failed2+
                    "\n경과시간: " + java.lang.String.format("%.2f",DCP.timer.end()/1000) + "초")
                DCP.timer.start()
                count_sucess2 = 0
                count_failed2 = 0
            } // 백업
            else{
                Api.replyRoom(console_room_name,"파싱 오류\n성공 : "+count_sucess2+"\n실패 : "+count_failed2)
                break_var = 1
            }
        }

    }

    DCP.setDB("UOS_DB"+DB_adress,JSON.stringify(pre_DB)) // DB 쓰기 작업
    return("성공 : "+count_sucess+"\n실패 : "+count_failed)
}

DCP.UOS_search = function UOS_search(key,mod){

    //검색옵션 구상중 : 제목, 글쓴이, 아이피

    if(mod=="title"){
        let temp = ""
        for(let i=Number(DCP.getDB("UOSDB_index")) ; i>-1 ; i--){
            temp = temp + JSON.parse(DCP.getDB("UOS_DB"+i)).filter(v=>String(v[0]).replace(/ /g,"")
                .includes(key.replace(/ /g,""))).sort(function(a,b){return Number(a[1])>Number(b[1]) ? -1 : Number(a[1]) < Number(b[1]) ? 1 : 0})
                .map(v=>"제목 : "+v[0]+"\n작성자 : "+v[3]+" "+v[4]+"\n날짜 : "+v[2]+"\n- https://gall.dcinside.com/board/view/?id=uos&no="+v[1]+"\n\n").join("")
        }
        return temp.trim().substr(0,200000)
    }
    else if(mod=="writer"){
        let temp = ""
        for(let i=Number(DCP.getDB("UOSDB_index")) ; i>-1 ; i--){
            temp = temp + JSON.parse(DCP.getDB("UOS_DB"+i)).filter(v=>String(v[3]).replace(/ /g,"")
                .includes(key.replace(/ /g,""))).sort(function(a,b){return Number(a[1])>Number(b[1]) ? -1 : Number(a[1]) < Number(b[1]) ? 1 : 0})
                .map(v=>"제목 : "+v[0]+"\n작성자 : "+v[3]+" "+v[4]+"\n날짜 : "+v[2]+"\n- https://gall.dcinside.com/board/view/?id=uos&no="+v[1]+"\n\n").join("")
        }
        return temp.trim().substr(0,200000)
    }
    else if(mod=="ip"){
        let temp = ""
        for(let i=Number(DCP.getDB("UOSDB_index")) ; i>-1 ; i--){
            temp = temp + JSON.parse(DCP.getDB("UOS_DB"+i)).filter(v=>String(v[4]).replace(/ /g,"")
                .includes(key.replace(/ /g,""))).sort(function(a,b){return Number(a[1])>Number(b[1]) ? -1 : Number(a[1]) < Number(b[1]) ? 1 : 0})
                .map(v=>"제목 : "+v[0]+"\n작성자 : "+v[3]+" "+v[4]+"\n날짜 : "+v[2]+"\n- https://gall.dcinside.com/board/view/?id=uos&no="+v[1]+"\n\n").join("")
        }
        return temp.trim().substr(0,200000)
    }
}


DCP.UOS_stat = function UOS_stat(){

    let num = []
    let sum = 0
    for(let j=2006 ; j<2021 ; j++){
        num[j] = 0
    }
    for(let i=Number(DCP.getDB("UOSDB_index")) ; i>-1 ; i--){
        for(let j=2006 ; j<2021 ; j++){
            num[j] = num[j] + JSON.parse(DCP.getDB("UOS_DB"+i)).map(v=>v[2]).filter(v=>String(v).indexOf(String(j))!=-1).length

        }
    }

    for(let j=2006 ; j<2021 ; j++){
        sum = sum + num[j]
    }

    let str = ""
    for(let j=2006 ; j<2021 ; j++){
        str = str + String(j) + "년 : " + num[j] + "개 (" + ((Number(num[j])/Number(sum))*100).toFixed(2) + "%)\n"
    }
    str = str + "총 " + sum + "개 글"

    return str

}




DCP.UOS_list = function UOS_list(room){

    let temp = JSON.parse(DCP.getDB("UOS_DB"+Number(DCP.getDB("UOSDB_index"))))
    let length = temp.length

    temp = temp.splice(length-5,5)

    let title = []
    let sub_title = []
    let link = []
    let mobile_link = []
    let THU = []


    let header_title = "시립대갤러리"
    let header_mobile_link = ""
    let header_web_link = ""
    let header_image = "http://15.164.226.64:7080/image/UOS_logo.png"
    let header_x = "800"
    let header_y = "136"
    let header = [header_title, header_mobile_link, header_web_link, header_image, header_x, header_y]



    for(let i=0 ; i<5 ; i++){
        try{
            title[i] = temp[4-i][0]
            sub_title[i] = temp[4-i][3]+temp[4-i][4] + " | " + String(temp[4-i][2]).split(" ")[0]
            link[i] = "redirect_UOS?tourl=https://gall.dcinside.com/board/view/?id=uos&no="+temp[4-i][1]
            mobile_link[i] = "redirect_UOS?tourl=https://gall.dcinside.com/board/view/?id=uos&no="+temp[4-i][1]
            THU[i] = ""
        }
        catch(e){
            title[i] = "-"
            sub_title[i] = "-"
            link[i] = "redirect_UOS?tourl=https://gall.dcinside.com/board/view/"
            mobile_link[i] = "redirect_UOS?tourl=https://gall.dcinside.com/board/view/"
            THU[i] = ""
        }

    }

    let NEC = ["","",0]

    UOSP.sendKaling_universal_5list(room,header,title,sub_title,link,mobile_link,THU,NEC)
}

DCP.break_DCP = function break_DCP(){
    if(break_var == 0){break_var = 1}
    else if(break_var == 1){break_var = 0}
}

DCP.apply_backup = function apply_backup(){
    let a = JSON.parse(DCP.getDB("UOS_DB_temp"))
    DCP.setDB("UOS_DB",JSON.stringify(a))
}


const kalingModule=require("kaling.js").Kakao();

DCP.kakaoReset = function kakaoReset(){
    Kakao = new kalingModule();
    //Kakao.init("29fbf6ec828f27d72544c39a3bb4f8d0"); // P.kakaoint자리(이전)
    Kakao.init("904c559bc0ec53c94df6dad990b24c52"); //
    //Kakao.init("e02397085dc52168fe675d7013e1cfbf"); // P.kakaoint자리

    Kakao.login(DCP.getDB("kakaoId"), DCP.getDB("kakaoPw"));
}

DCP.sendKaling_universal_5list = function sendKaling_universal_5list(room,header,title,sub_title,link,mobile_link,THU,NEC){

    let kalingObj = {
        "link_ver":"4.0",
        "template_id" : (33176),
        "template_args" : {
            header_title : String(header[0]),
            header_mobile_link : String(header[1]),
            header_web_link : String(header[2]),
            header_title_THU : String(header[3]),
            header_title_imaga_x : String(header[4]),
            header_title_imaga_y : String(header[5]),
            title1 : String(title[0]),
            title2 : String(title[1]),
            title3 : String(title[2]),
            title4 : String(title[3]),
            title5 : String(title[4]),
            sub_title1 : String(sub_title[0]),
            sub_title2 : String(sub_title[1]),
            sub_title3 : String(sub_title[2]),
            sub_title4 : String(sub_title[3]),
            sub_title5 : String(sub_title[4]),
            link1 : String(link[0]),
            link2 : String(link[1]),
            link3 : String(link[2]),
            link4 : String(link[3]),
            link5 : String(link[4]),
            mobile_link1 : String(mobile_link[0]),
            mobile_link2 : String(mobile_link[1]),
            mobile_link3 : String(mobile_link[2]),
            mobile_link4 : String(mobile_link[3]),
            mobile_link5 : String(mobile_link[4]),
            THU1 : String(THU[0]),
            THU2 : String(THU[1]),
            THU3 : String(THU[2]),
            THU4 : String(THU[3]),
            THU5 : String(THU[4]),
            link : String(NEC[0]),
            mobile_link : String(NEC[1]),
            listRank : NEC[2] // true false
        }
    }
    try{
        Kakao.send(room, kalingObj, "custom");
    }catch(e){
        DCP.kakaoReset();
        Kakao.send(room, kalingObj, "custom");
    }

}

DCP.sendKaling_notice = function sendKaling_notice(room, title, URL, description, THU, head){
    let kalingObj = {
        "link_ver":"4.0",
        "template_id" : (33040),
        "template_args" : {
            title : title,
            URL : URL,
            description : description,
            THU : THU,
            head : head
        }
    }
    try{
        Kakao.send(room, kalingObj, "custom");
    }catch(e){
        DCP.kakaoReset();
        Kakao.send(room, kalingObj, "custom");
    }
}


// 테이블 생성 : myDB.execSQL("create table DCPTable (k text PRIMARY KEY, v text);");

DCP.setDB = function setDB(key,value){
    if(D.selectForArray("DCPTable", null, "k like ?", key).length == 0){ // 해당하는 key에 value가 없는 경우
        D.insert("DCPTable",{k:key, v:value})
    }
    else{ // 해당하는 key에 value가 있는 경우
        D.update("DCPTable", {v:value}, "k=?", [key])
    }
}

DCP.getDB = function getDB(key){
    var arr = D.selectForArray("DCPTable", null, "k=?", [key]);
    if (arr.length > 0) {
        return arr[0][1];
    } else {
        return undefined;
    }
}

DCP.getNum = function getNum(key) {
    var value = DCP.getDB(key);
    return isNaN(value) ? 0 : Number(DCP.getDB(key));
}

DCP.timer = new (function(){ // 타이머
    var low=new Date();
    return {
        start : function() {
            low = new Date();
        },
        end : function() {
            var present = new Date;
            return present - low;
        }
    }})();


module.exports = DCP