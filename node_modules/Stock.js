Stock = new Object()


Stock.search=function search(name){ // 원하는 이름의 주식 정보 return 2020_05_12
    var temp = JSON.parse(org.jsoup.Jsoup.connect("https://m.stock.naver.com/api/json/search/searchListJson.nhn?keyword="+name+"&pageSize=20&page=1")
        .ignoreContentType(true).get().text())
    var num = temp.result.d.length // 검색결과의 갯수 리턴

    var stock_name = "" // 이름
    var stock_number = 0 // 종목번호
    var stock_price = 0 // 가격
    var stock_price_UD // 가격 등락
    var stock_price_UDP // 가격 등락 퍼센트

    var temp2 = "";

    if(num==1){
        temp2 = temp.result.d[0]
        stock_number = temp2.cd
        stock_name = temp2.nm
        stock_price = temp2.nv
        stock_price_UD = temp2.cv
        stock_price_UDP = temp2.cr
    }
    else if(num>1) {
        if (temp.result.d.filter(v => v.nm == name)[0] == undefined) { // 원하는 name으로 정확하게 일치 하는 것이 없는 경우 가장 첫줄의 정보 사용
            temp2 = temp.result.d[0]
            stock_number = temp2.cd
            stock_name = temp2.nm
            stock_price = temp2.nv
            stock_price_UD = temp2.cv
            stock_price_UDP = temp2.cr
        }
        else { // 원하는 name이 정확하게 존재 할 경우
            temp2 = temp.result.d.filter(v=>v.nm==name)[0]
            stock_number = temp2.cd
            stock_name = temp2.nm
            stock_price = temp2.nv
            stock_price_UD = temp2.cv
            stock_price_UDP = temp2.cr
        }
    }

    return [stock_number, stock_name, stock_price, stock_price_UD, stock_price_UDP]

    }

Stock.search_return=function search(name) { // 원하는 이름의 주식 정보 찾은 후 str로 return 2020_05_12
    var temp = Stock.search(name)
}

Stock.search_detail=function search_detail(name) { // 원하는 이름의 주식 정보 자세한 정보 return 2020_05_12

    var pre_data = Stock.search(name)

    var stock_number = pre_data[0]
    var stock_name = pre_data[1]
    var stock_price = pre_data[2]
    var stock_price_UD = pre_data[3]
    var stock_price_UDP = pre_data[4]

    var data = []

    var temp =  org.jsoup.Jsoup.connect("https://m.stock.naver.com/api/html/item/getOverallInfo.nhn?code="+stock_number).get().select(".total_lst>li>span")

    data[0] = temp.get(3).ownText() // 저가
    data[1] = temp.get(2).ownText() // 고가
    data[2] = temp.get(4).ownText() // 거래량
    data[3] = temp.get(5).ownText() // 대금
    data[4] = temp.get(6).ownText() // 시총
    data[5] = temp.get(7).ownText() // 외인소진율
    data[6] = temp.get(9).ownText() // 52주 최저
    data[7] = temp.get(8).ownText() // 52주 최고

    data[8] = temp.get(10).ownText() // PER
    data[9] = temp.get(14).ownText() // PBR
    data[10] = temp.get(11).ownText() // EPS
    data[11] = temp.get(15).ownText() // BPS

    data[12] = temp.get(16).ownText() // 배당률
    data[13] = temp.get(17).ownText() // 배당금

    //https://m.stock.naver.com/api/html/item/getOverallInfo.nhn?code=302550



    return [stock_number,stock_name,stock_price,stock_price_UD,stock_price_UDP,data]
}

Stock.search_detail_return=function search_detail_return(name) { // 원하는 이름의 주식 정보 자세한 정보 str로 return 2020_05_12
    /* 데이터 예시
        삼성전자 (005930) ₩47,900
        ₩500⬇ | -1.03% (47,550~48,550)

        52주 최저 : ₩40,850
        52주 최고 : ₩62,800

        거래량 : 247,443 | 대금 : 6,854백만
        시총 : 1,685억 | 외인소진율 : 1.24%

        PER : 15.13 | PBR : 1.28
        EPS : ₩3,166 | BPS : ₩37,528
        배당률 : 2.96% | 배당금 : ₩1,416
     */

    var pre_data = Stock.search_detail(name)

    var arrow = (pre_data[3]>0)?"⬆":"⬇";

    var str1 = ""
    var str2 = ""
    var str3 = ""
    var str4 = ""

    str1 = pre_data[1] + " (" + pre_data[0] + ") ₩" + pre_data[2] +"\n"+
        "₩"+ Math.abs(pre_data[3]) + arrow + " | " + pre_data[4] + "% (" + pre_data[5][0] + "~" + pre_data[5][1] + ")"
    str2 = "52주 최저 : ₩" + pre_data[5][6] + "\n" + "52주 최고 : ₩" + pre_data[5][7]
    str3 = "거래량 : " + pre_data[5][2] + "\n대금 : " + pre_data[5][3] +"\n"+
        "시총 : " + pre_data[5][4] + "\n외인소진율 : " + pre_data[5][5]
    str4 = "PER : " + pre_data[5][8] + " | PBR : " + pre_data[5][9] +"\n"+
        "EPS : " + pre_data[5][10] + " | BPS : " + pre_data[5][11] +"\n"+
        "배당률 : " + pre_data[5][12] + " | 배당금 : " + pre_data[5][13]

    return [str1, str2, str3, str4, pre_data[0], pre_data[1]]



}


/*
Stock.KOSPI_periodic=function KOSPI_periodic(KOSPI_reference,KOSPI_log) { // 코스피 실시간 알리미 2020_05_13

    var var_percent = org.jsoup.Jsoup.connect("https://kr.investing.com/indices/kospi").get().select(".top.bold.inlineblock>.arial_20").get(1).ownText().replace("%","")
    var diff = KOSPI_reference-var_percent

    if( Math.abs(diff) >= 0.2 ){
        date = new Date();
        var arrow = (diff<0)?"⬆":"⬇";
        KOSPI_log = (KOSPI_log+arrow).substr(-18)
        var KOSPI_current = org.jsoup.Jsoup.connect("https://kr.investing.com/indices/kospi").get().select(".top.bold.inlineblock>.arial_26.inlineblock.pid-37426-last").get(0).ownText().replace("%","")
        var str = "[ "+date.getHours()+" : "+date.getMinutes()+" | "+var_percent+"% "+arrow+" ]\n" +
            ": KOSPI / "+KOSPI_current+" / "+arrow+"\n" +
            "================\n"+KOSPI_log

        KOSPI_reference = Math.round(var_percent*5)/5;
        sendKalingImage(봇장난,"https://t1.daumcdn.net/finance/chart/kr/stock/d/D0011001.png",
            "sirip.kr",arrow+" "+KOSPI_current+" | "+var_percent+"%\n===============================\n"+KOSPI_log,"KOSPI(test)",996,519)
    }


}

Stock.cat=function cat(stock_cat){
    stock_cat = stock_cat + 1
    return stock_cat
}
*/

//======================================================================================================================
//================================== 지수 파싱 =========================================================================

Stock.indices_array_return = function indices_array_return(URL){ // 지수 파싱 일반화 2020_05_17 v1
    //ver 1 : 지수 파싱 일반화 : 2020_05_17

    var str = ""

    var parse = org.jsoup.Jsoup.connect("https://kr.investing.com/indices/"+URL).get();

    var price = parse.select(".arial_26").get(0).ownText() // 가격
    var UpDownPrice = parse.select(".arial_20").get(0).ownText() // 등락가
    var UpDownPercent = parse.select(".arial_20").get(1).ownText() // 등락률


    var parse_temp = parse.select(".clear.overviewDataTable>.inlineblock>.float_lang_base_2")

    var yesterday_price = parse_temp.get(0).ownText() // 전일 종가
    var today_price = parse_temp.get(3).ownText() // 금일 시가

    var temp = parse_temp.get(2).ownText()

    var low = temp.split("-")[0].trim() // 금일 저가
    var high = temp.split("-")[1].trim() // 금일 고가

    var years = parse_temp.get(5).ownText() // 연간 범위
    var yearsPercent = parse_temp.get(6).ownText() // 연간 등락률

    return [price, UpDownPrice, UpDownPercent, yesterday_price, today_price, low, high, years, yearsPercent,str]

}




Stock.KOSPI_array_return=function KOSPI_array_return() { // 코스피 파싱 array 형태로 리턴 (2020_05_17)
    var str = ""
    var price = "" // 가격
    var UpDownPercent = "" // 등락률
    var UpDownPrice = "" // 등락가
    var yesterday_price = "" // 전일 종가
    var today_price = "" // 금일 시가
    var low = "" // 금일 저가
    var high = "" // 금일 고가
    var parse = "";
    var years = ""; // 연간 범위
    var yearsPercent = ""; // 연간 등락률


    //split 코드를 퇴출시킵시다. (전국 split 퇴출본부 전스퇴)
    //title = parse.split('<!-- 일반 -->')[1].split('<span class="mhide">')[1].split('</span>')[1].split('</a>')[0] // 새로 파싱한 제목
    parse = org.jsoup.Jsoup.connect("https://kr.investing.com/indices/kospi").get()
    price = parse.select(".arial_26").get(0).ownText()
    UpDownPrice = parse.select(".arial_20").get(0).ownText()
    UpDownPercent = parse.select(".arial_20").get(1).ownText()
    yesterday_price = parse.select(".bottomText").get(0).select("span[dir=ltr]").get(0).ownText()
    today_price = parse.select(".bottomText").get(0).select("span[dir=ltr]").get(1).ownText()
    low = parse.select(".inlineblock").get(0).ownText()
    high = parse.select(".inlineblock").get(1).ownText()
    //years = parse.select(".first.inlineblock>.float_lang_base_2").get(3).ownText()
    years = "" // years 구하기 귀찮음 추후 수정 ^^
    yearsPercent = parse.select(".first.inlineblock>.float_lang_base_2").get(2).ownText()

    str = "현재 코스피 : "+price+" ("+UpDownPrice+", "+UpDownPercent+")\n"
    str += "금일 시가 : "+today_price+" ("+low+"-"+high+")\n"
    str += "전일 종가 : "+yesterday_price+"\n"
    str += "52주 가격 : "+years+" ("+yearsPercent+")"


    return [price, UpDownPrice, UpDownPercent, yesterday_price, today_price, low, high, years, yearsPercent,str]
}

Stock.KOSDAQ_array_return=function KOSPI_array_return() { // 코스닥 파싱 array 형태로 리턴 (2020_05_17)
    var str = ""
    var price = "" // 가격
    var UpDownPercent = "" // 등락률
    var UpDownPrice = "" // 등락가
    var yesterday_price = "" // 전일 종가
    var today_price = "" // 금일 시가
    var low = "" // 금일 저가
    var high = "" // 금일 고가
    var parse = "";
    var years = ""; // 연간 범위
    var yearsPercent = ""; // 연간 등락률


    //split 코드를 퇴출시킵시다. (전국 split 퇴출본부 전스퇴)
    //title = parse.split('<!-- 일반 -->')[1].split('<span class="mhide">')[1].split('</span>')[1].split('</a>')[0] // 새로 파싱한 제목
    parse = org.jsoup.Jsoup.connect("https://kr.investing.com/indices/kosdaq").get()
    price = parse.select(".arial_26").get(0).ownText()
    UpDownPrice = parse.select(".arial_20").get(0).ownText()
    UpDownPercent = parse.select(".arial_20").get(1).ownText()
    yesterday_price = parse.select(".bottomText").get(0).select("span[dir=ltr]").get(0).ownText()
    today_price = parse.select(".bottomText").get(0).select("span[dir=ltr]").get(1).ownText()
    low = parse.select(".inlineblock").get(0).ownText()
    high = parse.select(".inlineblock").get(1).ownText()
    //years = parse.select(".first.inlineblock>.float_lang_base_2").get(3).ownText()
    years = "" // years 구하기 귀찮음 추후 수정 ^^
    yearsPercent = parse.select(".first.inlineblock>.float_lang_base_2").get(2).ownText()

    str = "현재 코스닥 : "+price+" ("+UpDownPrice+", "+UpDownPercent+")\n"
    str += "금일 시가 : "+today_price+" ("+low+"-"+high+")\n"
    str += "전일 종가 : "+yesterday_price+"\n"
    str += "52주 가격 : "+years+" ("+yearsPercent+")"


    return [price, UpDownPrice, UpDownPercent, yesterday_price, today_price, low, high, years, yearsPercent,str]
}


Stock.NASDAQ_array_return=function NASDAQ_array_return() { // 나스닥 파싱 array 형태로 리턴 (2020_05_17)
    var str = ""
    var price = "" // 가격
    var UpDownPercent = "" // 등락률
    var UpDownPrice = "" // 등락가
    var yesterday_price = "" // 전일 종가
    var today_price = "" // 금일 시가
    var low = "" // 금일 저가
    var high = "" // 금일 고가
    var parse = "";
    var years = ""; // 연간 범위
    var yearsPercent = ""; // 연간 등락률


    //split 코드를 퇴출시킵시다. (전국 split 퇴출본부 전스퇴)
    //title = parse.split('<!-- 일반 -->')[1].split('<span class="mhide">')[1].split('</span>')[1].split('</a>')[0] // 새로 파싱한 제목
    parse = org.jsoup.Jsoup.connect("https://kr.investing.com/indices/nasdaq-composite").get()
    price = parse.select(".arial_26").get(0).ownText()
    UpDownPrice = parse.select(".arial_20").get(0).ownText()
    UpDownPercent = parse.select(".arial_20").get(1).ownText()
    yesterday_price = parse.select(".clear.overviewDataTAble>.inlineblock>.float_lang_base_2").get(0).ownText()
    today_price = parse.select(".bottomText").get(0).select("span[dir=ltr]").get(1).ownText()
    low = parse.select(".bottomText").select(".inlineblock").get(1).ownText() // 금일 저가
    high = parse.select(".bottomText").select(".inlineblock").get(2).ownText() // 금일 고가
    years = parse.select(".clear.overviewDataTAble>.inlineblock>.float_lang_base_2").get(5).ownText()
    yearsPercent = parse.select(".clear.overviewDataTAble>.inlineblock>.float_lang_base_2").get(6).ownText()

    return [price, UpDownPrice, UpDownPercent, yesterday_price, today_price, low, high, years, yearsPercent]
}

Stock.USD_array_return=function Gold_array_return() { // USD 정보를 array로 리턴
    var str = [];
    var price = "" // 가격
    var UpDownPercent = "" // 가격 등락 퍼센트
    var UpDownPrice = "" // 가격 등락 값
    var yesterday_price = "" // 전일 종가
    var today_price = "" // 금일 시가
    var low = "" // 금일 저가
    var high = "" // 금일 고가
    var parse = "";


    //split 코드를 퇴출시킵시다. (전국 split 퇴출본부 전스퇴)
    //title = parse.split('<!-- 일반 -->')[1].split('<span class="mhide">')[1].split('</span>')[1].split('</a>')[0] // 새로 파싱한 제목
    parse = org.jsoup.Jsoup.connect("https://kr.investing.com/currencies/usd-krw").get()
    price = parse.select(".float_lang_base_1.bold>#fl_header_pair_lst").get(0).ownText()
    UpDownPrice = parse.select(".float_lang_base_1.bold>#fl_header_pair_chg").get(0).ownText()
    UpDownPercent = parse.select(".float_lang_base_1.bold>#fl_header_pair_pch").get(0).ownText()
    yesterday_price = parse.select("#quotes_summary_secondary_data span[dir=ltr]").get(0).ownText()
    today_price = parse.select(".first>.float_lang_base_2").get(1).ownText()
    low = parse.select("#quotes_summary_secondary_data .inlineblock").get(0).ownText()
    high = parse.select("#quotes_summary_secondary_data .inlineblock").get(1).ownText()

    str[0] = "현재 달러 : "+price+"₩ ("+UpDownPrice+"₩, "+UpDownPercent+")\n"
    str[0] += "금일 시가 : "+today_price+"₩ ("+low+"₩-"+high+"₩)\n"
    str[0] += "전일 종가 : "+yesterday_price+"₩"

    str[1] = ""
    str[2] = "https://ssl.pstatic.net/imgfinance/chart/mobile/marketindex/month3/FX_USDKRW_end.png?sidcode=1589693806279"


    return [str,price,UpDownPrice,UpDownPercent,yesterday_price,today_price,low,high]
}



Stock.Gold_array_return=function Gold_array_return() { // WTI 정보를 array로 리턴
    var str = [];
    var price = "" // 가격
    var UpDownPercent = "" // 가격 등락 퍼센트
    var UpDownPrice = "" // 가격 등락 값
    var yesterday_price = "" // 전일 종가
    var today_price = "" // 금일 시가
    var low = "" // 금일 저가
    var high = "" // 금일 고가
    var parse = "";


    //split 코드를 퇴출시킵시다. (전국 split 퇴출본부 전스퇴)
    //title = parse.split('<!-- 일반 -->')[1].split('<span class="mhide">')[1].split('</span>')[1].split('</a>')[0] // 새로 파싱한 제목
    parse = org.jsoup.Jsoup.connect("https://kr.investing.com/commodities/gold").get()
    price = parse.select(".float_lang_base_1.bold>#fl_header_pair_lst").get(0).ownText()
    UpDownPrice = parse.select(".float_lang_base_1.bold>#fl_header_pair_chg").get(0).ownText()
    UpDownPercent = parse.select(".float_lang_base_1.bold>#fl_header_pair_pch").get(0).ownText()
    yesterday_price = parse.select("#quotes_summary_secondary_data span[dir=ltr]").get(0).ownText()
    today_price = parse.select("#quotes_summary_secondary_data span[dir=ltr]").get(1).ownText()
    low = parse.select("#quotes_summary_secondary_data .inlineblock").get(0).ownText()
    high = parse.select("#quotes_summary_secondary_data .inlineblock").get(1).ownText()

    str[0] = "현재 금 : "+price+"$ ("+UpDownPrice+"$, "+UpDownPercent+")\n"
    str[0] += "금일 시가 : "+today_price+"$ ("+low+"$-"+high+"$)\n"
    str[0] += "전일 종가 : "+yesterday_price+"$"

    var parse2 = "";

    str[1] = "";

    parse2 = org.jsoup.Jsoup.connect("https://kr.investing.com/commodities/gold-contracts").get()

    var name2 = [];
    var price2 = [];
    var var2 = [];
    var open2 = [];
    var high2 = [];
    var low2 = [];
    var updown2 = [];

    var temp = ""
    var monthSet = {Jan:"㋀",Feb:"㋁",Mar:"㋂",Apr:"㋃",May:"㋄",Jun:"㋅",Jul:"㋆",Aug:"㋇",Sep:"㋈",Oct:"㋉",Nov:"㋊",Dec:"㋋"};


    for(var i=0 ; i<10 ; i++){
        //WTI2_name[i] = parse2.select("tr#pair_"+(i+1)+">td.bold.left.noWrap>a").get(0).ownText().split(" ")[0]
        name2[i] = monthSet[parse2.select("tr#pair_"+(i+1)+">td.bold.left.noWrap>a").get(0).ownText().split(" ")[0]] || "現"
        temp = parse2.select("tr#pair_"+(i+1)+">td")
        price2[i] = temp.get(2).ownText().replace("s","")
        var2[i] = temp.get(3).ownText()

        updown2[i] = (var2[i].substr(0,1)=="+")?"⬆":"⬇";


        open2[i] = temp.get(4).ownText()
        high2[i] = temp.get(5).ownText()
        low2[i] = temp.get(6).ownText()
        str[1] += name2[i] + " : " + price2[i]+"$ ("+low2[i]+"$-"+high2[i]+"$)"+updown2[i]+"\n"
    }

    /*
    var date = new Date()
    var date_re = String(date.getYear()+1900) + String(date.getMonth()+1).date() + String(date.getDate()).date() +
        String(date.getHours()).date() + String(date.getMinutes()).date()
        */

    str[2] = "https://ssl.pstatic.net/imgfinance/chart/mobile/marketindex/month3/CMDT_GC_end.png?sidcode=1589693221845"


    return [str,price,UpDownPrice,UpDownPercent,yesterday_price,today_price,low,high]
}

Stock.WTI_array_return=function WTI_array_return() { // WTI 정보를 array로 리턴
    var str = [];
    var price = "" // 가격
    var UpDownPercent = "" // 가격 등락 퍼센트
    var UpDownPrice = "" // 가격 등락 값
    var yesterday_price = "" // 전일 종가
    var today_price = "" // 금일 시가
    var low = "" // 금일 저가
    var high = "" // 금일 고가
    var parse = "";


    //split 코드를 퇴출시킵시다. (전국 split 퇴출본부 전스퇴)
    //title = parse.split('<!-- 일반 -->')[1].split('<span class="mhide">')[1].split('</span>')[1].split('</a>')[0] // 새로 파싱한 제목
    parse = org.jsoup.Jsoup.connect("https://kr.investing.com/commodities/crude-oil").get()
    price = parse.select(".float_lang_base_1.bold>#fl_header_pair_lst").get(0).ownText()
    UpDownPrice = parse.select(".float_lang_base_1.bold>#fl_header_pair_chg").get(0).ownText()
    UpDownPercent = parse.select(".float_lang_base_1.bold>#fl_header_pair_pch").get(0).ownText()
    yesterday_price = parse.select("#quotes_summary_secondary_data span[dir=ltr]").get(0).ownText()
    today_price = parse.select("#quotes_summary_secondary_data span[dir=ltr]").get(1).ownText()
    low = parse.select("#quotes_summary_secondary_data .inlineblock").get(0).ownText()
    high = parse.select("#quotes_summary_secondary_data .inlineblock").get(1).ownText()


    str[0] = "현재 유가 : "+price+"$ ("+UpDownPrice+"$, "+UpDownPercent+")\n"
    str[0] += "금일 시가 : "+today_price+"$ ("+low+"$-"+high+"$)\n"
    str[0] += "전일 종가 : "+yesterday_price+"$"

    var parse2 = "";

    str[1] = "";

    parse2 = org.jsoup.Jsoup.connect("https://kr.investing.com/commodities/crude-oil-contracts").get()

    var name2 = [];
    var price2 = [];
    var var2 = [];
    var open2 = [];
    var high2 = [];
    var low2 = [];
    var updown2 = [];

    var temp = ""
    var monthSet = {Jan:"㋀",Feb:"㋁",Mar:"㋂",Apr:"㋃",May:"㋄",Jun:"㋅",Jul:"㋆",Aug:"㋇",Sep:"㋈",Oct:"㋉",Nov:"㋊",Dec:"㋋"};


    for(var i=0 ; i<10 ; i++){
        //WTI2_name[i] = parse2.select("tr#pair_"+(i+1)+">td.bold.left.noWrap>a").get(0).ownText().split(" ")[0]
        name2[i] = monthSet[parse2.select("tr#pair_"+(i+1)+">td.bold.left.noWrap>a").get(0).ownText().split(" ")[0]] || "現"
        temp = parse2.select("tr#pair_"+(i+1)+">td")
        price2[i] = temp.get(2).ownText().replace("s","")
        var2[i] = temp.get(3).ownText()

        updown2[i] = (var2[i].substr(0,1)=="+")?"⬆":"⬇";


        open2[i] = temp.get(4).ownText()
        high2[i] = temp.get(5).ownText()
        low2[i] = temp.get(6).ownText()
        str[1] += name2[i] + " : " + price2[i]+"$ ("+low2[i]+"$-"+high2[i]+"$)"+updown2[i]+"\n"
    }


    var date = new Date()
    var date_re = String(date.getYear()+1900) + String(date.getMonth()+1).date() + String(date.getDate()).date() +
        String(date.getHours()).date() + String(date.getMinutes()).date()


    str[2] = "https://t1.daumcdn.net/finance/chart/kr/commodity/m/mini/CLc1.png?timestamp="+date_re






    return [str,price,UpDownPrice,UpDownPercent,yesterday_price,today_price,low,high]
}

Stock.natural_Gas_array_return=function natural_Gas_array_return() { // 천연가스 파싱 array로 리턴 (2020_05_17)
    var str = [];
    var price = "" // 가격
    var UpDownPercent = "" // 가격 등락 퍼센트
    var UpDownPrice = "" // 가격 등락 값
    var yesterday_price = "" // 전일 종가
    var today_price = "" // 금일 시가
    var low = "" // 금일 저가
    var high = "" // 금일 고가
    var parse = "";


    //split 코드를 퇴출시킵시다. (전국 split 퇴출본부 전스퇴)
    //title = parse.split('<!-- 일반 -->')[1].split('<span class="mhide">')[1].split('</span>')[1].split('</a>')[0] // 새로 파싱한 제목
    parse = org.jsoup.Jsoup.connect("https://kr.investing.com/commodities/natural-gas").get()
    price = parse.select(".float_lang_base_1.bold>#fl_header_pair_lst").get(0).ownText()
    UpDownPrice = parse.select(".float_lang_base_1.bold>#fl_header_pair_chg").get(0).ownText()
    UpDownPercent = parse.select(".float_lang_base_1.bold>#fl_header_pair_pch").get(0).ownText()
    yesterday_price = parse.select("#quotes_summary_secondary_data span[dir=ltr]").get(0).ownText()
    today_price = parse.select("#quotes_summary_secondary_data span[dir=ltr]").get(1).ownText()
    low = parse.select("#quotes_summary_secondary_data .inlineblock").get(0).ownText()
    high = parse.select("#quotes_summary_secondary_data .inlineblock").get(1).ownText()

    str[0] = "현재 천연가스 : "+price+"$ ("+UpDownPrice+"$, "+UpDownPercent+")\n"
    str[0] += "금일 시가 : "+today_price+"$ ("+low+"$-"+high+"$)\n"
    str[0] += "전일 종가 : "+yesterday_price+"$"

    var parse2 = "";

    str[1] = "";

    parse2 = org.jsoup.Jsoup.connect("https://kr.investing.com/commodities/natural-gas-contracts").get()

    var name2 = [];
    var price2 = [];
    var var2 = [];
    var open2 = [];
    var high2 = [];
    var low2 = [];
    var updown2 = [];

    var temp = ""
    var monthSet = {Jan:"㋀",Feb:"㋁",Mar:"㋂",Apr:"㋃",May:"㋄",Jun:"㋅",Jul:"㋆",Aug:"㋇",Sep:"㋈",Oct:"㋉",Nov:"㋊",Dec:"㋋"};


    for(var i=0 ; i<10 ; i++){
        //WTI2_name[i] = parse2.select("tr#pair_"+(i+1)+">td.bold.left.noWrap>a").get(0).ownText().split(" ")[0]
        name2[i] = monthSet[parse2.select("tr#pair_"+(i+1)+">td.bold.left.noWrap>a").get(0).ownText().split(" ")[0]] || "現"
        temp = parse2.select("tr#pair_"+(i+1)+">td")
        price2[i] = temp.get(2).ownText().replace("s","")
        var2[i] = temp.get(3).ownText()

        updown2[i] = (var2[i].substr(0,1)=="+")?"⬆":"⬇";


        open2[i] = temp.get(4).ownText()
        high2[i] = temp.get(5).ownText()
        low2[i] = temp.get(6).ownText()
        str[1] += name2[i] + " : " + price2[i]+"$ ("+low2[i]+"$-"+high2[i]+"$)"+updown2[i]+"\n"
    }

    /*
    var date = new Date()
    var date_re = String(date.getYear()+1900) + String(date.getMonth()+1).date() + String(date.getDate()).date() +
        String(date.getHours()).date() + String(date.getMinutes()).date()
        */

    str[2] = "https://ssl.pstatic.net/imgfinance/chart/mobile/marketindex/month3/CMDT_NG_end.png?sidcode=1589691842800"






    return [str,price,UpDownPrice,UpDownPercent,yesterday_price,today_price,low,high]
}


Stock.start_summary=function start_summary() { // 장전 각종지표 요약 (2020_05_17)
    var str_comment = ""

    var str_comment = str_comment + "각종 지표 요약 (전일종가기준)\n\n"
    str_comment = str_comment + "=========한국장=========\n"

    var temp = Stock.indices_array_return("kospi")
    var arrow = (temp[1] > 0) ? "⬆" : "⬇";
    var str_comment = str_comment + "KOSPI : " + temp[0] + " (" + arrow + Math.abs(temp[2].replace("%", "")) + "%)\n"

    var temp = Stock.indices_array_return("kosdaq")
    var arrow = (temp[1] > 0) ? "⬆" : "⬇";
    var str_comment = str_comment + "KOSDAQ : " + temp[0] + " (" + arrow + Math.abs(temp[2].replace("%", "")) + "%)\n\n"

    str_comment = str_comment + "=========미장==========\n"

    var temp = Stock.indices_array_return("nasdaq-composite")
    var arrow = (temp[1] > 0) ? "⬆" : "⬇";
    var str_comment = str_comment + "NASDAQ종합 : " + temp[0] + " (" + arrow + Math.abs(temp[2].replace("%", "")) + "%)\n"

    var temp = Stock.indices_array_return("us-30")
    var arrow = (temp[1] > 0) ? "⬆" : "⬇";
    var str_comment = str_comment + "다우존스 : " + temp[0] + " (" + arrow + Math.abs(temp[2].replace("%", "")) + "%)\n"

    var temp = Stock.indices_array_return("us-spx-500")
    var arrow = (temp[1] > 0) ? "⬆" : "⬇";
    var str_comment = str_comment + "S&P500 : " + temp[0] + " (" + arrow + Math.abs(temp[2].replace("%", "")) + "%)\n\n"

    str_comment = str_comment + "=========유럽장=========\n"

    var temp = Stock.indices_array_return("uk-100")
    var arrow = (temp[1] > 0) ? "⬆" : "⬇";
    var str_comment = str_comment + "FTSE(영) : " + temp[0] + " (" + arrow + Math.abs(temp[2].replace("%", "")) + "%)\n"

    var temp = Stock.indices_array_return("france-40")
    var arrow = (temp[1] > 0) ? "⬆" : "⬇";
    var str_comment = str_comment + "CAC(프) : " + temp[0] + " (" + arrow + Math.abs(temp[2].replace("%", "")) + "%)\n"

    var temp = Stock.indices_array_return("germany-30")
    var arrow = (temp[1] > 0) ? "⬆" : "⬇";
    var str_comment = str_comment + "DAX(독) : " + temp[0] + " (" + arrow + Math.abs(temp[2].replace("%", "")) + "%)\n\n"

    str_comment = str_comment + "========아시아장==========\n"

    var temp = Stock.indices_array_return("japan-ni225")
    var arrow = (temp[1] > 0) ? "⬆" : "⬇";
    var str_comment = str_comment + "닛케이 : " + temp[0] + " (" + arrow + Math.abs(temp[2].replace("%", "")) + "%)\n"

    var temp = Stock.indices_array_return("shanghai-composite")
    var arrow = (temp[1] > 0) ? "⬆" : "⬇";
    var str_comment = str_comment + "상하이종합 : " + temp[0] + " (" + arrow + Math.abs(temp[2].replace("%", "")) + "%)\n\n"


    str_comment = str_comment + "=========기타==========\n"

    var temp = Stock.USD_array_return()
    var arrow = (temp[2] > 0) ? "⬆" : "⬇";
    var str_comment = str_comment + "USD 환율 : " + temp[1] + "₩ (" + arrow + Math.abs(temp[3].replace("%", "")) + "%)\n"

    var temp = Stock.Gold_array_return()
    var arrow = (temp[2] > 0) ? "⬆" : "⬇";
    var str_comment = str_comment + "금 : " + temp[1] + "$ (" + arrow + Math.abs(temp[3].replace("%", "")) + "%)\n"

    var temp = Stock.WTI_array_return()
    var arrow = (temp[2] > 0) ? "⬆" : "⬇";
    var str_comment = str_comment + "WTI유 : " + temp[1] + "$ (" + arrow + Math.abs(temp[3].replace("%", "")) + "%)\n"

    var temp = Stock.natural_Gas_array_return()
    var arrow = (temp[2] > 0) ? "⬆" : "⬇";
    var str_comment = str_comment + "천연가스 : " + temp[1] + "$ (" + arrow + Math.abs(temp[3].replace("%", "")) + "%)"

    return str_comment
}







module.exports = Stock