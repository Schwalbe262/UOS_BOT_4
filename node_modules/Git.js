Git = new Object()

let ignore_list=[]

Git.getFileList = function getFileList(gitlink) {
    var gitlink = gitlink.includes("/file-list/master") ? gitlink : gitlink + "/file-list/master";
    var html = org.jsoup.Jsoup.connect(gitlink).get();

    var filelist = html.select("div.Box-row.py-2").toArray().map(v=>{
        var rawType = String(v.selectFirst("svg").attr("class"))
        var type = rawType.includes("octicon-file-directory") ? "folder" :
            rawType.includes("octicon-file") ? "file" : "other"
        var rowheader = v.selectFirst("div[role=rowheader] a")
        var name = String(rowheader.text())
        var path = String(rowheader.attr("href")).split("/master").slice(1).join("/master")
        var check = String(v.selectFirst("div.commit-message a").attr("href")).split("/commit/").slice(1).join("/commit/")
        return {type:type, name:name, path:path, check:check}
    })

    filelist = filelist.map(v=>{
        if (v.type == "folder") {
            var newlink = gitlink + "/" + v.name;
            return Git.getFileList(newlink);
        }else{
            return v
        }
    })

    return flatten(filelist);
}

Git.pull = function pull(gitlink, folderpath) {
    var filelist = Git.getFileList(gitlink)
    for(var i = 0; i<filelist.length ; i++ ) {
        if(filelist[i].type == "file" && !ignore_list.includes(filelist[i].name)){
            var rawlink = "https://raw.githubusercontent.com"+gitlink.substr(gitlink.indexOf("github.com")+10) +"/"+ filelist[i].check + filelist[i].path
            var conn = new java.net.URL(rawlink).openConnection();
            conn.setRequestProperty("Content-Type", "text/xml;charset=utf-8");
            var is=conn.getInputStream();
            var br=new java.io.BufferedReader(new java.io.InputStreamReader(is));
            var str = ''
            var tmp=null;
            while (((tmp = br.readLine()) != null)) {
                str += tmp+"\n";
            }
            br.close();
            saveFile(folderpath+filelist[i].path , str)
        }
    }
}


Git.showme = function showme(arr) {
    let msg2 = ''
    for(var i=0;i<arr.length;i++) {
        let msg = i+".\n"+"type: " + arr[i].type + "\n"+"name: " + arr[i].name + "\n"+"path: " + arr[i].path + "\n"+"checksum: " + arr[i].check ;
        msg2 += msg +"\n\n"

    }
    Api.replyRoom(console_room_name,msg2)
}


Git.flatten = function flatten(arr) {
    return arr.reduce((acc, val) => Array.isArray(val) ? acc.concat(flatten(val)) : acc.concat(val), []);
}




module.exports = Git